version: '1'

services:
  nginx-proxy:
    image: jwilder/nginx-proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - //var//run//docker.sock:/tmp/docker.sock:ro
      - ${DOCKER_VOLUMES}/zarsoft/certs:/etc/nginx/certs:ro
      - /etc/nginx/vhost.d
      - /usr/share/nginx/html
      - ${DOCKER_VOLUMES}/zarsoft/acme:/etc/acme.sh
    labels:
      - com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy

  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    restart: always
    environment:
      - NGINX_PROXY_CONTAINER=nginx-proxy
    volumes:
      - ${DOCKER_VOLUMES}/zarsoft/certs:/etc/nginx/certs:rw
      - //var//run//docker.sock:/var/run/docker.sock:ro
      - ${DOCKER_VOLUMES}/zarsoft/acme:/etc/acme.sh
    volumes_from:
      - nginx-proxy:rw

  web:
    build: ./web
    image: zarsoft-web:latest
    pull_policy: build
    restart: always
    expose:
      - "80"
    volumes:
      - zarsoft-web:/usr/share/nginx/html:ro
    environment:
      - VIRTUAL_HOST=zar-soft.com,www.zar-soft.com
      - LETSENCRYPT_HOST=zar-soft.com,www.zar-soft.com
      - LETSENCRYPT_EMAIL=zar.soft.sw@gmail.com
    depends_on:
      - nginx-proxy
      - letsencrypt

  backend:
    build:
      context: ./backend/zarsoft
      dockerfile: Dockerfile
      args:
        spring_profile: prod
    image: zarsoft-backend:latest
    pull_policy: build
    restart: always
    ports:
      - "8085:8085"
    volumes:
      - zarsoft-backend:/usr/local/lib:ro

    
volumes:
  zarsoft-web:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '${DOCKER_VOLUMES}/zarsoft/web'
  
  zarsoft-backend:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '${DOCKER_VOLUMES}/zarsoft/backend'